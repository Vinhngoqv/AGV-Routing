function astar = Astar_finding(start_x,start_y,target_x,target_y,map)
%This function helps finding path for AGV ith
global start_time

%Khoi tao tap OPEN, CLOSE ban dau
    OPEN=[];
    CLOSED=[]; %Tap hop cac diem khong di qua duoc
    %Luu cac chuong ngai vat vao tap CLOSE
    k=1;%Dummy counter
    for i=1:size(map,1)
        for j=1:size(map,2)
            if(map(i,j) == -1)
                CLOSED(k,1)=i; %cot 1 la x
                CLOSED(k,2)=j; %cot 2 la y
                k=k+1;
            end
        end
    end
    CLOSED_COUNT = size(CLOSED,1);
    %%%%%%%%%%%%%%%%%%%%%set the starting node of the 1st AGV as the first node
    xNode=start_x;
    yNode=start_y;
    OPEN_COUNT = 1;
    path_cost=0;
    goal_distance=distance(xNode,yNode,target_x,target_y);
    OPEN(OPEN_COUNT,:)=insert_open(xNode,yNode,xNode,yNode,path_cost,goal_distance,goal_distance);
    OPEN(OPEN_COUNT,1)=0;
    CLOSED_COUNT=CLOSED_COUNT+1;
    CLOSED(CLOSED_COUNT,1)=xNode;
    CLOSED(CLOSED_COUNT,2)=yNode;
    NoPath=1;
    
    time = start_time;
    % START ALGORITHM
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    while((xNode ~= target_x || yNode ~= target_y) && NoPath == 1)
    %  plot(xNode+.5,yNode+.5,'go');
     exp_array=expand_array(xNode,yNode,path_cost,target_x,target_y,CLOSED,size(map,1),size(map,2));
     time = time + 2/24/3600;
     
     
%      fprintf('%s\n',datetime(time,'ConvertFrom','datenum'));
     
     
     exp_count=size(exp_array,1);
     
     for i=1:exp_count
        flag=0;
        for j=1:OPEN_COUNT
            if(exp_array(i,1) == OPEN(j,2) && exp_array(i,2) == OPEN(j,3) )
                OPEN(j,8)=min(OPEN(j,8),exp_array(i,5)); %#ok<*SAGROW>
                if OPEN(j,8)== exp_array(i,5)
                    %UPDATE PARENTS,gn,hn
                    OPEN(j,4)=xNode;
                    OPEN(j,5)=yNode;
                    OPEN(j,6)=exp_array(i,3);
                    OPEN(j,7)=exp_array(i,4);
                end;%End of minimum fn check
                flag=1;
            end;%End of node check
    %         if flag == 1
    %             break;
        end;%End of j for
        if flag == 0
            OPEN_COUNT = OPEN_COUNT+1;
            OPEN(OPEN_COUNT,:)=insert_open(exp_array(i,1),exp_array(i,2),xNode,yNode,exp_array(i,3),exp_array(i,4),exp_array(i,5));
         end;%End of insert new element into the OPEN list
     end;%End of i for
     
     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
     %END OF WHILE LOOP
     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
     %Find out the node with the smallest fn 
      index_min_node = min_fn(OPEN,OPEN_COUNT,target_x,target_y);
      if (index_min_node ~= -1)    
       %Set xNode and yNode to the node with minimum fn
       xNode=OPEN(index_min_node,2);
       yNode=OPEN(index_min_node,3);
       path_cost=OPEN(index_min_node,6);%Update the cost of reaching the parent node
      %Move the Node to list CLOSED
      CLOSED_COUNT=CLOSED_COUNT+1;
      CLOSED(CLOSED_COUNT,1)=xNode;
      CLOSED(CLOSED_COUNT,2)=yNode;
      OPEN(index_min_node,1)=0;
      else
          %No path exists to the Target!!
          NoPath=0;%Exits the loop!
      end;%End of index_min_node check
    end;%End of While Loop
    %Once algorithm has run The optimal path is generated by starting of at the
    %last node(if it is the target node) and then identifying its parent node
    %until it reaches the start node.This is the optimal path

    i=size(CLOSED,1);
    Optimal_path_1=[];
    xval_1=CLOSED(i,1);
    yval_1=CLOSED(i,2);
    i=1;
    Optimal_path_1(i,1)=xval_1;
    Optimal_path_1(i,2)=yval_1;
    i=i+1;
    
    if ( (xval_1 == target_x) && (yval_1 == target_y))
        inode=0;
       %Traverse OPEN and determine the parent nodes
       parent_x=OPEN(node_index(OPEN,xval_1,yval_1),4);%node_index returns the index of the node
       parent_y=OPEN(node_index(OPEN,xval_1,yval_1),5);

       while( parent_x ~= start_x || parent_y ~= start_y)
               Optimal_path_1(i,1) = parent_x;
               Optimal_path_1(i,2) = parent_y;
               %Get the grandparents:-)
               inode=node_index(OPEN,parent_x,parent_y);
               parent_x=OPEN(inode,4);%node_index returns the index of the node
               parent_y=OPEN(inode,5);
               i=i+1;
        end;
        p1 = 1;
        %ve duong da tim
        Optimal_path_1(size(Optimal_path_1,1)+1,1)= start_x;
        Optimal_path_1(size(Optimal_path_1,1),2)= start_y;
        plot(Optimal_path_1(:,1)+.5,Optimal_path_1(:,2)+.5);
    else
     pause(1);
     h=msgbox('Sorry, No path exists to the Target 1st!','warn');
     uiwait(h,5);
    end
    Optimal_path_1=flipud(Optimal_path_1); %dao nguoc ma tran
    astar = Optimal_path_1;
    
    %gan thoi gian va luu vao ma tran dat cho
    if size(astar,1) > 0
        for i = 1:size(astar,1)
            astar(i,3) = start_time + (i-1)*2/24/3600;
    %         POS_MAP{AGV{1,agv}.path(i,2),AGV{1,agv}.path(i,1)}(size(POS_MAP{AGV{1,agv}.path(i,2),AGV{1,agv}.path(i,1)},1)+1,:) = [agv,AGV{1,agv}.path(i,3)];
        end
    end
end
